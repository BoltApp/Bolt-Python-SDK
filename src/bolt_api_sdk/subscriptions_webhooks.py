"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from bolt_api_sdk import errors, models, utils
from bolt_api_sdk._hooks import HookContext
from bolt_api_sdk.types import OptionalNullable, UNSET
from bolt_api_sdk.utils import get_security_from_env
from bolt_api_sdk.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional, Union


class SubscriptionsWebhooks(BaseSDK):
    r"""Webhooks are sent as a **POST request** to a Merchant's server. Webhooks are retried with an exponential backoff until they are either acknowledged or ignored.

    To acknowledge the webhook, respond with `200`. To fail the webhook, respond with `422`. Bolt recommends adding a webhook response body to both responses.

    """

    def subscription_webhooks(
        self,
        *,
        security: Union[
            models.SubscriptionWebhooksSecurity,
            models.SubscriptionWebhooksSecurityTypedDict,
        ],
        x_bolt_hmac_sha256: Optional[str] = None,
        type_: Optional[models.V1WebhookBodyType] = None,
        object: Optional[models.Object] = None,
        data: Optional[
            Union[models.V1SubscriptionResponse, models.V1SubscriptionResponseTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.V1WebhookSuccess:
        r"""Subscription Webhooks

        This request updates the merchant about statuses of their shoppers' subscriptions. The subscriptions'
        related events are:
        - `subscription_created`
        - `subscription_renewed`
        - `subscription_canceled`

        Also see [API for managing webhooks](/api-bolt/#tag/webhooks) for more details


        :param security:
        :param x_bolt_hmac_sha256: Signed HMAC for hook verification
        :param type:
        :param object:
        :param data:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.SUBSCRIPTION_WEBHOOKS_OP_SERVERS[0]

        request = models.SubscriptionWebhooksRequest(
            x_bolt_hmac_sha256=x_bolt_hmac_sha256,
            v1_webhook_body=models.V1WebhookBody(
                type=type_,
                object=object,
                data=utils.get_pydantic_model(
                    data, Optional[models.V1SubscriptionResponse]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/webhooks_subscriptions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.SubscriptionWebhooksSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.v1_webhook_body, False, False, "json", models.V1WebhookBody
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="SubscriptionWebhooks",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.V1WebhookSuccess, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(errors.V1WebhookErrorData, http_res)
            raise errors.V1WebhookError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def subscription_webhooks_async(
        self,
        *,
        security: Union[
            models.SubscriptionWebhooksSecurity,
            models.SubscriptionWebhooksSecurityTypedDict,
        ],
        x_bolt_hmac_sha256: Optional[str] = None,
        type_: Optional[models.V1WebhookBodyType] = None,
        object: Optional[models.Object] = None,
        data: Optional[
            Union[models.V1SubscriptionResponse, models.V1SubscriptionResponseTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.V1WebhookSuccess:
        r"""Subscription Webhooks

        This request updates the merchant about statuses of their shoppers' subscriptions. The subscriptions'
        related events are:
        - `subscription_created`
        - `subscription_renewed`
        - `subscription_canceled`

        Also see [API for managing webhooks](/api-bolt/#tag/webhooks) for more details


        :param security:
        :param x_bolt_hmac_sha256: Signed HMAC for hook verification
        :param type:
        :param object:
        :param data:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.SUBSCRIPTION_WEBHOOKS_OP_SERVERS[0]

        request = models.SubscriptionWebhooksRequest(
            x_bolt_hmac_sha256=x_bolt_hmac_sha256,
            v1_webhook_body=models.V1WebhookBody(
                type=type_,
                object=object,
                data=utils.get_pydantic_model(
                    data, Optional[models.V1SubscriptionResponse]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/webhooks_subscriptions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.SubscriptionWebhooksSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.v1_webhook_body, False, False, "json", models.V1WebhookBody
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="SubscriptionWebhooks",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.V1WebhookSuccess, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(errors.V1WebhookErrorData, http_res)
            raise errors.V1WebhookError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
