"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from bolt_api_sdk import errors, models, utils
from bolt_api_sdk._hooks import HookContext
from bolt_api_sdk.types import BaseModel, OptionalNullable, UNSET
from bolt_api_sdk.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional, Union, cast


class Ignite3OAuth(BaseSDK):
    r"""Use the OAuth API to enable your ecommerce server to make API calls on behalf of a Bolt logged-in shopper.
    https://help.bolt.com/products/accounts/direct-api/oauth-guide/
    """

    def get_token(
        self,
        *,
        request: Union[
            models.OauthGetTokenRequest, models.OauthGetTokenRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ThreeDot3Dot7GetAccessTokenResponse]:
        r"""Get OAuth token

        Retrieve a new or refresh an existing OAuth token.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.OAUTH_GET_TOKEN_OP_SERVERS[0]
            url_variables = {
                "environment": "api-sandbox",
            }

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.OauthGetTokenRequest)
        request = cast(models.OauthGetTokenRequest, request)

        req = self._build_request(
            method="POST",
            path="/oauth/token",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=False,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "form", models.OauthGetTokenRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="oauthGetToken",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.ThreeDot3Dot7GetAccessTokenResponse, http_res
            )
        if utils.match_response(http_res, "4XX", "application/json"):
            response_data = unmarshal_json_response(
                errors.ThreeDot3Dot7Response4xxUnion, http_res
            )
            raise errors.ThreeDot3Dot7Response4xx(response_data, http_res)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "*"):
            return None

        raise errors.APIError("Unexpected response received", http_res)

    async def get_token_async(
        self,
        *,
        request: Union[
            models.OauthGetTokenRequest, models.OauthGetTokenRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ThreeDot3Dot7GetAccessTokenResponse]:
        r"""Get OAuth token

        Retrieve a new or refresh an existing OAuth token.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.OAUTH_GET_TOKEN_OP_SERVERS[0]
            url_variables = {
                "environment": "api-sandbox",
            }

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.OauthGetTokenRequest)
        request = cast(models.OauthGetTokenRequest, request)

        req = self._build_request_async(
            method="POST",
            path="/oauth/token",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=False,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "form", models.OauthGetTokenRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="oauthGetToken",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.ThreeDot3Dot7GetAccessTokenResponse, http_res
            )
        if utils.match_response(http_res, "4XX", "application/json"):
            response_data = unmarshal_json_response(
                errors.ThreeDot3Dot7Response4xxUnion, http_res
            )
            raise errors.ThreeDot3Dot7Response4xx(response_data, http_res)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "*"):
            return None

        raise errors.APIError("Unexpected response received", http_res)
