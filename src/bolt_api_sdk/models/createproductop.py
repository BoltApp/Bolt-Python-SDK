"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .v1_product import V1Product, V1ProductTypedDict
from bolt_api_sdk.types import BaseModel
from bolt_api_sdk.utils import FieldMetadata, SecurityMetadata
from enum import Enum
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


CREATE_PRODUCT_OP_SERVERS = [
    # The Production URL (Live Data).
    "https://api.bolt.com",
    # The Sandbox URL (Test Data).
    "https://api-sandbox.bolt.com",
    # The Staging URL (Staged Data).
    "https://api-staging.bolt.com",
]


class CreateProductSecurityTypedDict(TypedDict):
    v1_x_api_key: NotRequired[str]
    v1_x_publishable_key: NotRequired[str]


class CreateProductSecurity(BaseModel):
    v1_x_api_key: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="X-API-Key",
            )
        ),
    ] = None

    v1_x_publishable_key: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="X-Publishable-Key",
            )
        ),
    ] = None


class CreateProductFrequencyUnit(str, Enum):
    r"""Unit of frequency (e.g., hour, week, month)."""

    WEEK = "week"
    MONTH = "month"
    YEAR = "year"


class PlanTypedDict(TypedDict):
    sku: str
    r"""SKU of the plan."""
    name: str
    r"""Name of the plan."""
    frequency: int
    r"""Frequency of the plan."""
    frequency_unit: CreateProductFrequencyUnit
    r"""Unit of frequency (e.g., hour, week, month)."""


class Plan(BaseModel):
    sku: str
    r"""SKU of the plan."""

    name: str
    r"""Name of the plan."""

    frequency: int
    r"""Frequency of the plan."""

    frequency_unit: CreateProductFrequencyUnit
    r"""Unit of frequency (e.g., hour, week, month)."""


class CreateProductRequestTypedDict(TypedDict):
    name: str
    r"""Name of the product."""
    description: str
    r"""Description of the product."""
    brand: str
    r"""Brand of the product."""
    sku: str
    r"""SKU of the product."""
    unit_price: int
    r"""Unit price of the product in cents."""
    plans: List[PlanTypedDict]
    merchant_product_id: NotRequired[str]
    r"""ID for the product; if missing, global plans are created"""
    merchant_variant_id: NotRequired[str]
    r"""ID for the product variant"""
    images: NotRequired[List[str]]
    r"""Array of image URLs for the product."""


class CreateProductRequest(BaseModel):
    name: str
    r"""Name of the product."""

    description: str
    r"""Description of the product."""

    brand: str
    r"""Brand of the product."""

    sku: str
    r"""SKU of the product."""

    unit_price: int
    r"""Unit price of the product in cents."""

    plans: List[Plan]

    merchant_product_id: Optional[str] = None
    r"""ID for the product; if missing, global plans are created"""

    merchant_variant_id: Optional[str] = None
    r"""ID for the product variant"""

    images: Optional[List[str]] = None
    r"""Array of image URLs for the product."""


class CreateProductResponseTypedDict(TypedDict):
    r"""Product created successfully."""

    product: NotRequired[V1ProductTypedDict]
    r"""Product object."""


class CreateProductResponse(BaseModel):
    r"""Product created successfully."""

    product: Optional[V1Product] = None
    r"""Product object."""
