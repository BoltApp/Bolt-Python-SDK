"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .v1_paymentmethod import V1PaymentMethod, V1PaymentMethodTypedDict
from .v1_plan import V1Plan, V1PlanTypedDict
from .v1_subscriptionstatus import V1SubscriptionStatus
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from datetime import datetime
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class V1SubscriptionResponseTypedDict(TypedDict):
    id: NotRequired[str]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]
    merchant_name: NotRequired[str]
    consumer_id: NotRequired[int]
    email: NotRequired[str]
    price: NotRequired[int]
    r"""Price of the subscribed product in cents, e.g. `199` would translate to `$1.99`"""
    currency: NotRequired[str]
    r"""ISO4217 compatible currency code"""
    status: NotRequired[V1SubscriptionStatus]
    payment_method: NotRequired[V1PaymentMethodTypedDict]
    next_renewal_date: NotRequired[Nullable[datetime]]
    canceled_date: NotRequired[Nullable[datetime]]
    paused_date: NotRequired[Nullable[datetime]]
    plan: NotRequired[V1PlanTypedDict]


class V1SubscriptionResponse(BaseModel):
    id: Optional[str] = None

    created_at: Optional[datetime] = None

    updated_at: Optional[datetime] = None

    merchant_name: Optional[str] = None

    consumer_id: Optional[int] = None

    email: Optional[str] = None

    price: Optional[int] = None
    r"""Price of the subscribed product in cents, e.g. `199` would translate to `$1.99`"""

    currency: Optional[str] = None
    r"""ISO4217 compatible currency code"""

    status: Optional[V1SubscriptionStatus] = None

    payment_method: Optional[V1PaymentMethod] = None

    next_renewal_date: OptionalNullable[datetime] = UNSET

    canceled_date: OptionalNullable[datetime] = UNSET

    paused_date: OptionalNullable[datetime] = UNSET

    plan: Optional[V1Plan] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "created_at",
            "updated_at",
            "merchant_name",
            "consumer_id",
            "email",
            "price",
            "currency",
            "status",
            "payment_method",
            "next_renewal_date",
            "canceled_date",
            "paused_date",
            "plan",
        ]
        nullable_fields = ["next_renewal_date", "canceled_date", "paused_date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
