"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from bolt_api_sdk import errors, models, utils
from bolt_api_sdk._hooks import HookContext
from bolt_api_sdk.types import OptionalNullable, UNSET
from bolt_api_sdk.utils import get_security_from_env
from bolt_api_sdk.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional, Union


class LoggedIn(BaseSDK):
    def initialize(
        self,
        *,
        security: Union[
            models.PaymentsInitializeSecurity,
            models.PaymentsInitializeSecurityTypedDict,
        ],
        x_publishable_key: str,
        cart: Union[models.ThreeDot3Dot7Cart, models.ThreeDot3Dot7CartTypedDict],
        payment_method: Union[
            models.ThreeDot3Dot7PaymentMethodExtended,
            models.ThreeDot3Dot7PaymentMethodExtendedTypedDict,
        ],
        x_merchant_client_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ThreeDot3Dot7PaymentResponse]:
        r"""Initialize a Bolt payment for logged in shoppers

        Initialize a Bolt logged-in shopper's intent to pay for a cart, using the specified payment method. Payments must be finalized before indicating the payment result to the shopper. Some payment methods will finalize automatically after initialization. For these payments, they will transition directly to \"finalized\" and the response from Initialize Payment will contain a finalized payment.


        :param security:
        :param x_publishable_key: The publicly shareable identifier used to identify your Bolt merchant division.
        :param cart:
        :param payment_method:
        :param x_merchant_client_id: A unique identifier for a shopper's device, generated by Bolt. The value is retrieved with `Bolt.state.merchantClientId` in your frontend context, per-shopper. This header is required for proper attribution of this operation to your analytics reports. Omitting this header may result in incorrect statistics.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.PAYMENTS_INITIALIZE_OP_SERVERS[0]
            url_variables = {
                "environment": "api-sandbox",
            }

        request = models.PaymentsInitializeRequest(
            x_publishable_key=x_publishable_key,
            x_merchant_client_id=x_merchant_client_id,
            three_dot_3_dot_7_payment_initialize_request=models.ThreeDot3Dot7PaymentInitializeRequest(
                cart=utils.get_pydantic_model(cart, models.ThreeDot3Dot7Cart),
                payment_method=utils.get_pydantic_model(
                    payment_method, models.ThreeDot3Dot7PaymentMethodExtended
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/payments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.PaymentsInitializeSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.three_dot_3_dot_7_payment_initialize_request,
                False,
                False,
                "json",
                models.ThreeDot3Dot7PaymentInitializeRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="paymentsInitialize",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.ThreeDot3Dot7PaymentResponse, http_res
            )
        if utils.match_response(http_res, "4XX", "application/json"):
            response_data = unmarshal_json_response(
                errors.ThreeDot3Dot7ResponsePaymentErrorUnion, http_res
            )
            raise errors.ThreeDot3Dot7ResponsePaymentError(response_data, http_res)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "*"):
            return None

        raise errors.APIError("Unexpected response received", http_res)

    async def initialize_async(
        self,
        *,
        security: Union[
            models.PaymentsInitializeSecurity,
            models.PaymentsInitializeSecurityTypedDict,
        ],
        x_publishable_key: str,
        cart: Union[models.ThreeDot3Dot7Cart, models.ThreeDot3Dot7CartTypedDict],
        payment_method: Union[
            models.ThreeDot3Dot7PaymentMethodExtended,
            models.ThreeDot3Dot7PaymentMethodExtendedTypedDict,
        ],
        x_merchant_client_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ThreeDot3Dot7PaymentResponse]:
        r"""Initialize a Bolt payment for logged in shoppers

        Initialize a Bolt logged-in shopper's intent to pay for a cart, using the specified payment method. Payments must be finalized before indicating the payment result to the shopper. Some payment methods will finalize automatically after initialization. For these payments, they will transition directly to \"finalized\" and the response from Initialize Payment will contain a finalized payment.


        :param security:
        :param x_publishable_key: The publicly shareable identifier used to identify your Bolt merchant division.
        :param cart:
        :param payment_method:
        :param x_merchant_client_id: A unique identifier for a shopper's device, generated by Bolt. The value is retrieved with `Bolt.state.merchantClientId` in your frontend context, per-shopper. This header is required for proper attribution of this operation to your analytics reports. Omitting this header may result in incorrect statistics.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.PAYMENTS_INITIALIZE_OP_SERVERS[0]
            url_variables = {
                "environment": "api-sandbox",
            }

        request = models.PaymentsInitializeRequest(
            x_publishable_key=x_publishable_key,
            x_merchant_client_id=x_merchant_client_id,
            three_dot_3_dot_7_payment_initialize_request=models.ThreeDot3Dot7PaymentInitializeRequest(
                cart=utils.get_pydantic_model(cart, models.ThreeDot3Dot7Cart),
                payment_method=utils.get_pydantic_model(
                    payment_method, models.ThreeDot3Dot7PaymentMethodExtended
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/payments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.PaymentsInitializeSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.three_dot_3_dot_7_payment_initialize_request,
                False,
                False,
                "json",
                models.ThreeDot3Dot7PaymentInitializeRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="paymentsInitialize",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.ThreeDot3Dot7PaymentResponse, http_res
            )
        if utils.match_response(http_res, "4XX", "application/json"):
            response_data = unmarshal_json_response(
                errors.ThreeDot3Dot7ResponsePaymentErrorUnion, http_res
            )
            raise errors.ThreeDot3Dot7ResponsePaymentError(response_data, http_res)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "*"):
            return None

        raise errors.APIError("Unexpected response received", http_res)

    def perform_action(
        self,
        *,
        security: Union[
            models.PaymentsActionSecurity, models.PaymentsActionSecurityTypedDict
        ],
        x_publishable_key: str,
        id: str,
        dot_tag: models.ThreeDot3Dot7PaymentActionRequestTag,
        x_merchant_client_id: Optional[str] = None,
        redirect_result: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ThreeDot3Dot7PaymentResponse]:
        r"""Finalize a pending payment

        Finalize a pending payment being made by a Bolt logged-in shopper. Upon receipt of a finalized payment result, payment success should be communicated to the shopper.

        :param security:
        :param x_publishable_key: The publicly shareable identifier used to identify your Bolt merchant division.
        :param id: The ID of the payment to operate on
        :param dot_tag:
        :param x_merchant_client_id: A unique identifier for a shopper's device, generated by Bolt. The value is retrieved with `Bolt.state.merchantClientId` in your frontend context, per-shopper. This header is required for proper attribution of this operation to your analytics reports. Omitting this header may result in incorrect statistics.
        :param redirect_result: Optional redirect result token required for an APM payment (excluding PayPal).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.PAYMENTS_ACTION_OP_SERVERS[0]
            url_variables = {
                "environment": "api-sandbox",
            }

        request = models.PaymentsActionRequest(
            x_publishable_key=x_publishable_key,
            x_merchant_client_id=x_merchant_client_id,
            id=id,
            three_dot_3_dot_7_payment_action_request=models.ThreeDot3Dot7PaymentActionRequest(
                dot_tag=dot_tag,
                redirect_result=redirect_result,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/payments/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.PaymentsActionSecurity),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.three_dot_3_dot_7_payment_action_request,
                False,
                False,
                "json",
                models.ThreeDot3Dot7PaymentActionRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="paymentsAction",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.ThreeDot3Dot7PaymentResponse, http_res
            )
        if utils.match_response(http_res, "4XX", "application/json"):
            response_data = unmarshal_json_response(
                errors.ThreeDot3Dot7Response4xxUnion, http_res
            )
            raise errors.ThreeDot3Dot7Response4xx(response_data, http_res)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "*"):
            return None

        raise errors.APIError("Unexpected response received", http_res)

    async def perform_action_async(
        self,
        *,
        security: Union[
            models.PaymentsActionSecurity, models.PaymentsActionSecurityTypedDict
        ],
        x_publishable_key: str,
        id: str,
        dot_tag: models.ThreeDot3Dot7PaymentActionRequestTag,
        x_merchant_client_id: Optional[str] = None,
        redirect_result: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ThreeDot3Dot7PaymentResponse]:
        r"""Finalize a pending payment

        Finalize a pending payment being made by a Bolt logged-in shopper. Upon receipt of a finalized payment result, payment success should be communicated to the shopper.

        :param security:
        :param x_publishable_key: The publicly shareable identifier used to identify your Bolt merchant division.
        :param id: The ID of the payment to operate on
        :param dot_tag:
        :param x_merchant_client_id: A unique identifier for a shopper's device, generated by Bolt. The value is retrieved with `Bolt.state.merchantClientId` in your frontend context, per-shopper. This header is required for proper attribution of this operation to your analytics reports. Omitting this header may result in incorrect statistics.
        :param redirect_result: Optional redirect result token required for an APM payment (excluding PayPal).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.PAYMENTS_ACTION_OP_SERVERS[0]
            url_variables = {
                "environment": "api-sandbox",
            }

        request = models.PaymentsActionRequest(
            x_publishable_key=x_publishable_key,
            x_merchant_client_id=x_merchant_client_id,
            id=id,
            three_dot_3_dot_7_payment_action_request=models.ThreeDot3Dot7PaymentActionRequest(
                dot_tag=dot_tag,
                redirect_result=redirect_result,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/payments/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.PaymentsActionSecurity),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.three_dot_3_dot_7_payment_action_request,
                False,
                False,
                "json",
                models.ThreeDot3Dot7PaymentActionRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="paymentsAction",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.ThreeDot3Dot7PaymentResponse, http_res
            )
        if utils.match_response(http_res, "4XX", "application/json"):
            response_data = unmarshal_json_response(
                errors.ThreeDot3Dot7Response4xxUnion, http_res
            )
            raise errors.ThreeDot3Dot7Response4xx(response_data, http_res)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "*"):
            return None

        raise errors.APIError("Unexpected response received", http_res)
